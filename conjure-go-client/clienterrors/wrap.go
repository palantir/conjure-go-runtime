// Copyright (c) 2021 Palantir Technologies. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package clienterrors

import (
	"context"
	"errors"
	"net"
	"net/http"
	"syscall"

	werror "github.com/palantir/witchcraft-go-error"
)

func WrapClientError(req *http.Request, origErr error) error {
	// When type-checking the errors, unwrap any werrors added after the error was generated by the stdlib.
	rootErr := werror.RootCause(origErr)

	if errors.Is(rootErr, context.Canceled) || errors.Is(rootErr, context.DeadlineExceeded) {
		return WrapWithCanceledByClient(origErr)
	}

	if netErr := new(net.OpError); errors.As(rootErr, &netErr) {
		if syscallErr := syscall.Errno(0); errors.As(origErr, &syscallErr) {
			switch syscallErr {
			// TODO: Add more cases
			case syscall.ECONNREFUSED:
				return WrapWithConnectionRefused(origErr, netErr.Addr.String())
			}
		}
	}

	if dnsErr := new(net.DNSError); errors.As(origErr, &dnsErr) {
		if dnsErr.IsNotFound {
			return WrapWithDnsNoSuchHost(origErr, dnsErr.Name)
		}
		if dnsErr.IsTimeout {
			return WrapWithDnsTimeout(origErr, dnsErr.Name)
		}
		return WrapWithDnsLookupFailed(origErr, dnsErr.Name)
	}

	// TODO: Add more error types

	return origErr
}
